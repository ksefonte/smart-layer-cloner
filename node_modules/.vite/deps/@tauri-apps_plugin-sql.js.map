{
  "version": 3,
  "sources": ["../../@tauri-apps/plugin-sql/dist-js/index.js"],
  "sourcesContent": ["import { invoke } from '@tauri-apps/api/core';\n\n// Copyright 2019-2023 Tauri Programme within The Commons Conservancy\n// SPDX-License-Identifier: Apache-2.0\n// SPDX-License-Identifier: MIT\n/**\n * **Database**\n *\n * The `Database` class serves as the primary interface for\n * communicating with the rust side of the sql plugin.\n */\nclass Database {\n    constructor(path) {\n        this.path = path;\n    }\n    /**\n     * **load**\n     *\n     * A static initializer which connects to the underlying database and\n     * returns a `Database` instance once a connection to the database is established.\n     *\n     * # Sqlite\n     *\n     * The path is relative to `tauri::path::BaseDirectory::App` and must start with `sqlite:`.\n     *\n     * @example\n     * ```ts\n     * const db = await Database.load(\"sqlite:test.db\");\n     * ```\n     */\n    static async load(path) {\n        const _path = await invoke('plugin:sql|load', {\n            db: path\n        });\n        return new Database(_path);\n    }\n    /**\n     * **get**\n     *\n     * A static initializer which synchronously returns an instance of\n     * the Database class while deferring the actual database connection\n     * until the first invocation or selection on the database.\n     *\n     * # Sqlite\n     *\n     * The path is relative to `tauri::path::BaseDirectory::App` and must start with `sqlite:`.\n     *\n     * @example\n     * ```ts\n     * const db = Database.get(\"sqlite:test.db\");\n     * ```\n     */\n    static get(path) {\n        return new Database(path);\n    }\n    /**\n     * **execute**\n     *\n     * Passes a SQL expression to the database for execution.\n     *\n     * @example\n     * ```ts\n     * // for sqlite & postgres\n     * // INSERT example\n     * const result = await db.execute(\n     *    \"INSERT into todos (id, title, status) VALUES ($1, $2, $3)\",\n     *    [ todos.id, todos.title, todos.status ]\n     * );\n     * // UPDATE example\n     * const result = await db.execute(\n     *    \"UPDATE todos SET title = $1, completed = $2 WHERE id = $3\",\n     *    [ todos.title, todos.status, todos.id ]\n     * );\n     *\n     * // for mysql\n     * // INSERT example\n     * const result = await db.execute(\n     *    \"INSERT into todos (id, title, status) VALUES (?, ?, ?)\",\n     *    [ todos.id, todos.title, todos.status ]\n     * );\n     * // UPDATE example\n     * const result = await db.execute(\n     *    \"UPDATE todos SET title = ?, completed = ? WHERE id = ?\",\n     *    [ todos.title, todos.status, todos.id ]\n     * );\n     * ```\n     */\n    async execute(query, bindValues) {\n        const [rowsAffected, lastInsertId] = await invoke('plugin:sql|execute', {\n            db: this.path,\n            query,\n            values: bindValues ?? []\n        });\n        return {\n            lastInsertId,\n            rowsAffected\n        };\n    }\n    /**\n     * **select**\n     *\n     * Passes in a SELECT query to the database for execution.\n     *\n     * @example\n     * ```ts\n     * // for sqlite & postgres\n     * const result = await db.select(\n     *    \"SELECT * from todos WHERE id = $1\", [ id ]\n     * );\n     *\n     * // for mysql\n     * const result = await db.select(\n     *    \"SELECT * from todos WHERE id = ?\", [ id ]\n     * );\n     * ```\n     */\n    async select(query, bindValues) {\n        const result = await invoke('plugin:sql|select', {\n            db: this.path,\n            query,\n            values: bindValues ?? []\n        });\n        return result;\n    }\n    /**\n     * **close**\n     *\n     * Closes the database connection pool.\n     *\n     * @example\n     * ```ts\n     * const success = await db.close()\n     * ```\n     * @param db - Optionally state the name of a database if you are managing more than one. Otherwise, all database pools will be in scope.\n     */\n    async close(db) {\n        const success = await invoke('plugin:sql|close', {\n            db\n        });\n        return success;\n    }\n}\n\nexport { Database as default };\n"],
  "mappings": ";;;;;;AAWA,IAAM,WAAN,MAAM,UAAS;AAAA,EACX,YAAY,MAAM;AACd,SAAK,OAAO;AAAA,EAChB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAgBA,aAAa,KAAK,MAAM;AACpB,UAAM,QAAQ,MAAM,OAAO,mBAAmB;AAAA,MAC1C,IAAI;AAAA,IACR,CAAC;AACD,WAAO,IAAI,UAAS,KAAK;AAAA,EAC7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAiBA,OAAO,IAAI,MAAM;AACb,WAAO,IAAI,UAAS,IAAI;AAAA,EAC5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAiCA,MAAM,QAAQ,OAAO,YAAY;AAC7B,UAAM,CAAC,cAAc,YAAY,IAAI,MAAM,OAAO,sBAAsB;AAAA,MACpE,IAAI,KAAK;AAAA,MACT;AAAA,MACA,QAAQ,cAAc,CAAC;AAAA,IAC3B,CAAC;AACD,WAAO;AAAA,MACH;AAAA,MACA;AAAA,IACJ;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAmBA,MAAM,OAAO,OAAO,YAAY;AAC5B,UAAM,SAAS,MAAM,OAAO,qBAAqB;AAAA,MAC7C,IAAI,KAAK;AAAA,MACT;AAAA,MACA,QAAQ,cAAc,CAAC;AAAA,IAC3B,CAAC;AACD,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAYA,MAAM,MAAM,IAAI;AACZ,UAAM,UAAU,MAAM,OAAO,oBAAoB;AAAA,MAC7C;AAAA,IACJ,CAAC;AACD,WAAO;AAAA,EACX;AACJ;",
  "names": []
}
